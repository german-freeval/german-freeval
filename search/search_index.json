{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 Text Only 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"Text Only 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"API%20Reference/input/","text":"input \u00b6 segment_parsers \u00b6 ParserUtil \u00b6 Source code in german_freeval/input/segment_parsers.py Python class ParserUtil : @classmethod def read_file ( cls , path : str ) -> str : \"\"\"Read file content from the given file path and split lines and values. Args: path (str): Path of the file to be read. Returns: str: The file content. \"\"\" csv_file = open ( path , \"r\" ) data = csv_file . read () csv_file . close () lines = [ line for mixed_line in data . splitlines () if len ( mixed_line ) > 0 for line in mixed_line . split ( \"|\" ) if len ( line ) > 0 ] rows = [[ v for v in line . split ( \";\" )] for line in lines ] return rows read_file ( path ) classmethod \u00b6 Read file content from the given file path and split lines and values. Parameters: Name Type Description Default path str Path of the file to be read. required Returns: Type Description str The file content. Source code in german_freeval/input/segment_parsers.py Python @classmethod def read_file ( cls , path : str ) -> str : \"\"\"Read file content from the given file path and split lines and values. Args: path (str): Path of the file to be read. Returns: str: The file content. \"\"\" csv_file = open ( path , \"r\" ) data = csv_file . read () csv_file . close () lines = [ line for mixed_line in data . splitlines () if len ( mixed_line ) > 0 for line in mixed_line . split ( \"|\" ) if len ( line ) > 0 ] rows = [[ v for v in line . split ( \";\" )] for line in lines ] return rows","title":"input"},{"location":"API%20Reference/input/#input","text":"","title":"input"},{"location":"API%20Reference/input/#german_freeval.input.segment_parsers","text":"","title":"segment_parsers"},{"location":"API%20Reference/input/#german_freeval.input.segment_parsers.ParserUtil","text":"Source code in german_freeval/input/segment_parsers.py Python class ParserUtil : @classmethod def read_file ( cls , path : str ) -> str : \"\"\"Read file content from the given file path and split lines and values. Args: path (str): Path of the file to be read. Returns: str: The file content. \"\"\" csv_file = open ( path , \"r\" ) data = csv_file . read () csv_file . close () lines = [ line for mixed_line in data . splitlines () if len ( mixed_line ) > 0 for line in mixed_line . split ( \"|\" ) if len ( line ) > 0 ] rows = [[ v for v in line . split ( \";\" )] for line in lines ] return rows","title":"ParserUtil"},{"location":"API%20Reference/macro/","text":"macro \u00b6","title":"macro"},{"location":"API%20Reference/macro/#macro","text":"","title":"macro"},{"location":"API%20Reference/meta/","text":"meta \u00b6 app \u00b6 App \u00b6 App is the main class of the german_freeval package. It initializes the configuration and starts a simulation. Source code in german_freeval/meta/app.py Python class App : \"\"\"App is the main class of the german_freeval package. It initializes the configuration and starts a simulation. \"\"\" def main ( self , file : str ): \"\"\"Starts a simulationusing the configuration defined in the given file. Args: file (str): path to the config file to be used in the simulation \"\"\" context = Context . create_from ( file ) Simulator ( context ) . run () main ( self , file ) \u00b6 Starts a simulationusing the configuration defined in the given file. Parameters: Name Type Description Default file str path to the config file to be used in the simulation required Source code in german_freeval/meta/app.py Python def main ( self , file : str ): \"\"\"Starts a simulationusing the configuration defined in the given file. Args: file (str): path to the config file to be used in the simulation \"\"\" context = Context . create_from ( file ) Simulator ( context ) . run ()","title":"meta"},{"location":"API%20Reference/meta/#meta","text":"","title":"meta"},{"location":"API%20Reference/meta/#german_freeval.meta.app","text":"","title":"app"},{"location":"API%20Reference/meta/#german_freeval.meta.app.App","text":"App is the main class of the german_freeval package. It initializes the configuration and starts a simulation. Source code in german_freeval/meta/app.py Python class App : \"\"\"App is the main class of the german_freeval package. It initializes the configuration and starts a simulation. \"\"\" def main ( self , file : str ): \"\"\"Starts a simulationusing the configuration defined in the given file. Args: file (str): path to the config file to be used in the simulation \"\"\" context = Context . create_from ( file ) Simulator ( context ) . run ()","title":"App"},{"location":"API%20Reference/micro/","text":"micro \u00b6","title":"micro"},{"location":"API%20Reference/micro/#micro","text":"","title":"micro"}]}